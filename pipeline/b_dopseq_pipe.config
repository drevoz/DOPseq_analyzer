# Processing of sequencing data of DOP-PCR libraries from isolated chromosomes
# Configuration parameters for processing of one sample are given step by step. Some parameters not listed here are embedded in scripts.
# Usage: dopseq_pipe.py dopseq_pipe.config
# Output files are written to current folder. For details see comments below.
# Expects all executables in ../exec/ relative to b_dopseq_pipe.py

# Assignable parameters

sample=VVUB # sample name - used as prefix for all files
fastq_F_file=../examples/test.F.fastq # path to file with forward reads
fastq_R_file=../examples/test.R.fastq # path to file with reverse reads

target_genome=../../../genomes/canFam3/canFam3 # path and prefix for bowtie2 index of target genome
contam_genome=../../../genomes/hg19/hg19 # path and prefix for bowtie2 index of contamination genome (human in our case)
sizes_file=../examples/canFam3.sizes # tab-separated file with chromosomes and their sizes (can be obtained from UCSC database). Note that only chromosomes listed in this file are processed.

ampl=wga # Amplification protocol - used to remove specific primers. Possible values: dop, wga, none.
bowtie2_args="-p 1 --local" # Additional parameters for bowtie2 specified as quoted string.
# For reference, see bowtie2 manual.
# --local option was routinely used in cervid B chromosomes paper as an optimization for between-species alignment.

# Step 1. fastq_clean.py - Removes residual Illumina adapters and primers from pair of input fastq read files
# Output files: sample.F.ca.fastq, sample.R.ca.fastq

# Step 2. fastq_to_bam.py - Aligns pair of fastq read files to target and contamination genomes.
# Output files: sample.target_genome.sam, sample.contam_genome.sam (both removed in Step 3).

# Step 3. contam_filter.py - Removes contamination reads by comparing MAPQs to target and cotamination genomes. Outputs sorted and indexed bams.
# Requires pysam
# Output files: sample.target_genome.filter.bam, sample.target_genome.unmap.bam, sample.contam_genome.contam.bam + .bai indices

# Step 4. bam_to_beds.py - From filtered bam file creates reads and positions bed files.
# Output files: sample.target_genome.filter.reads.bed, sample.target_genome.filter.pos.bed

# Step 4a. control_stats.py - From reads and positions bed files calculates statistics for each chromosome. Makes sense only for control libraries: chromosomes of target geonome.
# Requires numpy
# Output file: sample.target_genome.filter.chrom.tsv

# Step 4b. control_plots.R - From positions bed file generates pdf file with plots of pairwise distances, coverage of postions on every chromosome. Used for control libraries.
# Output file: sample.target_genome.filter.chrom.pdf

# Step 5. regions_dnacopy.R - From positions bed file generates bed-like file with regions and their statistics and pdf plot for all chromosomes listed in .sizes file. 
# Requires R::DNAcopy (installation commands available in script)
# Output files: sample.target_genome.filter.reg.tsv, sample.target_genome.filter.reg.pdf

# Step 6. sample_stats.py - Calculates basic sample stats: reads, aligned reads etc.
# Output file: sample.stats.txt

# After manual inspection and correction of regions called you can re-calculate stats for them:
# ../exec/basic_stats.py sample.target_genome.filter.bam sample.target_genome.corrected.reg.bed sizes_file

# You also can run variant calling with GATK HaplotypeCaller for these regions
# ../exec/bamreg_to_vcf.py -t sample.target_genome.filter.reg.bed -g target_genome.fasta \
# --path_to_gatk ... --path_to_picard ... sample.target_genome.filter.bam

# Input for RepeatExplorer (interleaved fasta with minimum read length 18 - word size) can be generated
# sample.[FR].ca.fastq files are used as input
# ../exec/fastq_repexpl.py [-r] sample
