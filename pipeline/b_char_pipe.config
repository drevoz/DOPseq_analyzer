# Processing of sequencing data of DOP-PCR libraries from isolated chromosomes
# Configuration parameters for processing of one sample are given step by step. Some parameters not listed here are embedded in scripts.
# Output files are written to current folder.
# Every step can be enabled or disabled.
# All commands used are printed to stderr, program output is printed to stdout
# Usage: b_char_pipe.py b_char_pipe.config

# Common paramerers - used in multiple steps
sample=VVUB # sample name - used as prefix for all files
path_to_exec=../exec/ # folder with all scripts. Leave empty if execs in $PATH
target_genome=../../data/genome/canFam3/canFam3 # path and prefix for bowtie2 index of target genome
contam_genome=../../data/genome/hg19/hg19 # path and prefix for bowtie2 index of contamination genome (human in our case)
sizes_file=../../data/genome/canFam3/canFam3.sizes # tab-separated file with chromosomes and their sizes (can be obtained from UCSC database). Note that only chromosomes listed in this file are processed.

# Step 1. fastq_to_bam.py - Aligns pair of fastq read files to target and contamination genomes with preliminary DOP primer and Illumina adapter removal.
# Output files: sample.F.ca.fastq (intermediate), sample.R.ca.fastq (intermediate), sample.target_genome.sam, sample.contam_genome.sam.
do_fastq_to_bam=True # False - do not perform this step.
fastq_F_file=test.F.fastq # path to file with forward reads
fastq_R_file=test.R.fastq # path to file with reverse reads
path_to_cutadapt=cutadapt # path to cutadapt adapter remover
path_to_bowtie2=bowtie2 # path to bowtie2 aligner
proc_bowtie2=1 # number of processors allocated for bowtie2

# Step 2. contam_filter.py - Removes contamination reads by comparing MAPQs to target and cotamination genomes. Outputs sorted and indexed bams.
# Requires pysam
# Output files: sample.target_genome.filter.bam, sample.target_genome.unmap.bam, sample.contam_genome.contam.bam + .bai indices
do_contam_filter=True # False - do not perform this step.
min_quality=20

# Step 3. bam_to_beds.py - From filtered bam file creates reads and positions bed files.
# Output files: sample.target_genome.filter.reads.bed, sample.target_genome.filter.pos.bed
do_bam_to_beds=True # False - do not perform this step.
path_to_bedtools=bedtools # path to bedtools binary

# Step 3a (optional). control_stats.py - From reads and positions bed files calculates statistics for each chromosome. Makes sense only for control libraries: chromosomes of target geonome.
# Requires numpy
# Output file: sample.target_genome.filter.chromstat.tsv
do_control_stats=True # False - do not perform this step. 

# Step 3b (optional). control_plots.R - From positions bed file generates pdf file with plots of pairwise distances, coverage of postions on every chromosome. Used for control libraries.
# Output file: sample.target_genome.filter.chromstat.pdf
do_control_plots=True # False - do not perform this step.

# Step 4. regions_dnacopy.R - From positions bed file generates bed-like file with regions and their statistics and pdf plot for all chromosomes listed in .sizes file. 
# Requires R::DNAcopy (installation commands available in script)
# Output files:sample.target_genome.filter.reg.tsv, sample.target_genome.filter.reg.pdf
do_region_dnacopy=True # False - do not perform this step.

# After manual inspection and correction of regions called you can re-calculate stats for them:
# ../exec/basic_stats.py sample.target_genome.filter.bam sample.target_genome.filter.reg.bed sizes_file
 

